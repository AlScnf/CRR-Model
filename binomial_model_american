import math

def binomial_price_american(S, K, r, q, T, sigma, n, option_type):
    
    dt = T / n
    u = math.exp(sigma * math.sqrt(dt))
    d = 1 / u
    p = (math.exp((r - q) * dt) - d) / (u - d)
    prices = [0] * (n + 1)
    for i in range(n + 1):
        prices[i] = S * (u ** i) * (d ** (n - i))
    if option_type == 'call':
        option_values = [max(0, px - K) for px in prices]
    elif option_type == 'put':
        option_values = [max(0, K - px) for px in prices]
    else:
        raise ValueError("Invalid option type")
    for i in range(n - 1, -1, -1):
        for j in range(i + 1):
            intrinsic_value = max(0, K - prices[j]) if option_type == 'call' else max(0, prices[j] - K)
            option_values[j] = max(intrinsic_value, math.exp(-r * dt) * (p * option_values[j] + (1 - p) * option_values[j + 1]))
    return option_values[0]

price = binomial_price_american(S=100, K=100, r=0.05, q=0.03, T=0.5, sigma=0.2, n=100, option_type='call')
print(price)
