"""
This function is very similar to the European option pricing function that I provided earlier. 
The main difference is that in the inner loop, we compare the intrinsic value of the option 
(the maximum of 0 and the difference between the strike price and the underlying asset price) 
to the value that we calculate using the CRR model, and take the maximum of the two. 
This ensures that the option value is always at least as high as its intrinsic value, 
which is required for American options.
"""

import math

def binomial_price(S, K, r, q, T, sigma, n, option_type):
    """
    Calculates the price of an American option using the Cox, Ross, and Rubinstein (CRR) model.
    
    Parameters:
    S: float - the spot price of the underlying asset
    K: float - the strike price of the option
    r: float - the risk-free interest rate
    q: float - the dividend yield
    T: float - the time to maturity of the option (in years)
    sigma: float - the volatility of the underlying asset
    n: int - the number of steps in the binomial tree
    option_type: str - 'call' or 'put'
    
    Returns:
    float - the price of the option
    """
    dt = T / n
    u = math.exp(sigma * math.sqrt(dt))
    d = 1 / u
    p = (math.exp((r - q) * dt) - d) / (u - d)
    prices = [0] * (n + 1)
    for i in range(n + 1):
        prices[i] = S * (u ** i) * (d ** (n - i))
    if option_type == 'call':
        option_values = [max(0, px - K) for px in prices]
    elif option_type == 'put':
        option_values = [max(0, K - px) for px in prices]
    else:
        raise ValueError("Invalid option type")
    for i in range(n - 1, -1, -1):
        for j in range(i + 1):
            intrinsic_value = max(0, K - prices[j]) if option_type == 'call' else max(0, prices[j] - K)
            option_values[j] = max(intrinsic_value, math.exp(-r * dt) * (p * option_values[j] + (1 - p) * option_values[j + 1]))
    return option_values[0]

price = binomial_price(S=100, K=100, r=0.05, q=0.03, T=0.5, sigma=0.2, n=100, option_type='call')
print(price)
